#! /bin/bash

# use bash -x ./photo_downloader to run in debug mode or uncomment the following:
# set -x

backup_drive_label='Backup_Data'
camera_name='OLYMPUS_E-30'
camera_dir='/DCIM/100OLYMP/'
working_dir='/home/My Home/My Pictures/'
backup_dir='/My Pictures/'
image_types=(png ORF JPG jpg)
exiftool_date_pattern='%Y/raw images/%m %b/%Y_%m_%d/'

function variable_print_outs ()
{
	echo from line $1
	echo loop$loop.line$LINENO ": LOOP ITERATION : ""$loop"
	echo loop$loop.line$LINENO ": CAMERA DIRECTORY, FILENAME WILDCARD AND FILETYPE EXTENSION : ""${camera_dir}"*."${filename_extension}"
	echo loop$loop.line$LINENO ": TARGET ARRAY LOOP FILENAME :" "${target_array[loop]}"
	echo loop$loop.line$LINENO ": CAMERA DIRECTORY FILENAME : " "${camera_dir}"${target_array[loop]} ": WORKING DIRECTORY FILENAME :" "${working_dir}"${target_array[((loop+1))]}${target_array[loop]}
	echo loop$loop.line$LINENO ": CAMERA DIRECTORY FILENAME : " "${camera_dir}"${target_array[loop]} ": BACKUP DIRECTORY FILENAME :"  "${backup_dir}"${target_array[((loop+1))]}${target_array[loop]}
	echo loop$loop.line$LINENO ": NUMBER OF TARGET ARRAY ELEMENTS :" "${#target_array[@]}"". TARGET ARRAY ELEMENTS :"$'\n'"${target_array[@]}"
	echo loop$loop.line$LINENO ": IMAGE TYPES : " "${image_types[@]}"
	echo loop$loop.line$LINENO ": TARGET ARRAY ZERO :" "${target_array[0]}"
	echo loop$loop.line$LINENO ": TARGET ARRAY  ONE :" "${target_array[1]}"
	echo loop$loop.line$LINENO ": IFS :" "${IFS@Q}" "OLD IFS VALUE :" "${old_IFS@Q}"
	echo $'\n'
}

if [[ ${1} == "test"  ]]
	then
		echo testing
		camera_dir=./DCIM/100OLYMP/
		working_dir=./working/
		backup_dir=./backup/
fi

if [[ $(findmnt -n -o target /dev/disk/by-id/*"$camera_name"*part1) ]]
	then
		echo "$camera_name" camera is attached
	else
		echo "$camera_name" camera is not attached, exiting
		if [[ ${1} == "test" ]]
			then
				echo "Testing..."$'\n'"Continuing with test directory structure."
			else
				exit
		fi
fi

if [[ $(findmnt -n -o target /dev/disk/by-label/"$backup_drive_label") ]]
	then
		echo "$backup_drive_label" disk is mounted
	else
		echo "$backup_drive_label" disk is not mounted
		if [[ ${1} == "test" ]]
			then
				echo "Testing..."$'\n'"Continuing with test directory structure."
			else
				udisksctl mount -b /dev/disk/by-label/"$backup_drive_label"
		fi
fi

camera_dir=$(findmnt -n -o target /dev/disk/by-id/*"$camera_name"*part1)"$camera_dir"
backup_dir=$(findmnt -n -o target /dev/disk/by-label/"$backup_drive_label")"$backup_dir"
loop=0

echo Settings$'\n' backup_drive_label$'\t'"$backup_drive_label"$'\n' camera_name$'\t'$'\t'"$camera_name"$'\n' camera_dir$'\t'$'\t'"$camera_dir"$'\n' working_dir$'\t'$'\t'"$working_dir"$'\n' backup_dir$'\t'$'\t'"$backup_dir"$'\n' exiftool_date_pattern$'\t'"$exiftool_date_pattern"$'\n' image_types[*]$'\t'$'\t'"${image_types[*]}"$'\n'

unset target_array

for filename_extension in "${image_types[@]}"
do
	echo 'file type is:' $filename_extension
	files=($camera_dir*.$filename_extension)
	[[ -a  "${files[0]}" ]] &&  echo $'\n'file extension $filename_extension exists on camera$'\n' || { echo $'\n'file extension $filename_extension does not exist on camera$'\n'; continue; }
	old_IFS=$IFS; IFS=,$'\n'
	echo 'reading exif data'
	target_array+=($(exiftool -p '$filename,$datetimeoriginal' -d "$exiftool_date_pattern" $camera_dir*."$filename_extension"))
	IFS=$old_IFS
done

while ((loop <= ${#target_array[@]}))
do
	if ((loop == 0))
		then
			# first loop
			file_list=("$camera_dir""${target_array[loop]}")
	elif [[ "${target_array[((loop+1))]}" == "${target_array[((loop-1))]}" ]]
		then
			# next file same path
			file_list+=("$camera_dir""${target_array[loop]}")
	else
			# next file different path save files and clear list
			working_path="$working_dir""${target_array[((loop-1))]}"
			backup_path="$backup_dir""${target_array[((loop-1))]}"
			echo 'transferring to '"$working_path"' and '"$backup_path"
			rsync --mkpath -au "${file_list[@]}" "$working_path"&
			rsync --mkpath -au "${file_list[@]}" "$backup_path"
			wait
			file_list=("$camera_dir""${target_array[loop]}")
	fi
	((loop+=2))
done

if [[ ${1} == "test" ]]
	then
		echo deleting test directories
		rm -r ./backup ./working
fi

# variable_print_outs "$LINENO"

#************************************************************************************************************
# COMMENTS
#***********************************************************************************************************
#   1)	'SHEBANG' # SHARP ! BANG OR SHA-BANG, HASHBANG etc SPECIFIES THE INTERPRETER AND ITS LOCATION FOR THE SCRIPT
#   3)	set BUILTIN MODIFIES SHELL BEHAVIOUR OR DISPLAYS NAMES AND VALUES OF SHELL VARIABLES. set -x OR set -o xtrace EQUIVALENT TO bash -x ./photo_downloader PRINTS A TRACE OF COMMANDS AND ARITHMATIC AND EXPANSIONS BEFORE EXECUTION FOR DEBUGGING. USE set +x TO END DEBUGGING MODE.
#   6-12)	PLACED VARIABLE ASSIGNMENTS TOGETHER HERE TO ALLOW EASY CUSTOMISATION EDITING OR POSSIBLE INTERACTIVE SCRIPT CHOICE SAY FOR CAMERA ID. MUST BE QUOTED TO ALLOW FOR SPACES IN NAMES (NO WORD SPLITTING) '' PRESERVES THE LITERAL VALUE "" PRESERVES THE LITERAL VALUE EXCEPT FOR $'|! CHARACTERS. THE SPECIAL PARAMETERS * AND @ CREATE LISTS OF POSITIONAL PARAMETERS IF QUOTED
#   6)	LABEL OF THE DRIVE TO MOUNT AND SEND THE BACKUP COPY TO, LABEL WAS THE EASIEST WAY TO CONSISTANTLY MOUNT DRIVE AND FIND THE MOUNT POINT ls /dev/disk/by-label/*
#   7)	THE NAME OF THE CAMERA FOUND BY PLUGING IN CAMERA AND AFTER AUTO MOUNT EXECUTING ls /dev/disk/by-id/*
#   8)	THE DIRECTORY STRUCTURE ON THE CAMERA'S MEMORY CARD, OLYMPUS USE /DCIM/100OLYMP
#   9)	THE DIRECTORY ON ~/home WHERE FILES TO BE PROCESSED WILL BE LOCATED
#  10)	THE DIRECTORY ON /media WHERE FILES TO BE ARCHIVED WILL BE LOCATED
#  11)	THE IMAGE FILE EXTENSIONS TO BE SEARCHED FOR AND DOWNLOADED FROM THE CAMERA
#  12)	PATTERN FOR exiftool -d DATE FORMAT OPTION USING strftime SYNTAX WHICH ULTIMATELY CREATES DATE BASED FOLDER STRUCTURE TO STORE IMAGES WHERE
#				%Y = YEAR AS DECIMAL INCLUDING CENTURY ie 2024
#				%m = MONTH AS DECIMAL ie 04
#				%b = MONTH AS SHORT STRING ie APR
#				%d = DAY OF THE MONTH AS DECIMAL ie 21
# RESULTING IN 2024/raw images/04 Apr/2024_04_21
#  14-24)	A FUNCTION TO PRINT OUT A LIST OF GLOBAL VARIABLES (BEFORE I FOUND set -x) TO HELP DEBUG / UNDERSTAND BASH AND TEST VARIABLE COMBINATIONS, EXPANSIONS AND SUBSTITUTIONS. COULD ALSO USE declare -p NAME WHERE -p	DISPLAY THE ATTRIBUTES AND VALUE OF EACH NAME
#		declare -p camera_dir
#			declare -- camera_dir="/media/$USER/OLY_E-30/media/$USER/OLY_E-30/DCIM/100OLYMP/"
#  14)	VERBOSE OPENING FOR FUNCTION
#  16)	PRINT OUT LINE NUMBER THE FUNCTION WAS CALLED FROM USING POSITIONAL PARAMETER $1 WHICH CONTAINS THE FIRST ARGUMENT PASSED TO THE FUNCTION IN THE CALL ie variable_print_outs <argument1>
#  17)  PRINTS OUT THE LOOP VARIABLE COUNTER AND BASH VARIABLE $LINENO WHICH RETURNS THE LINE NUMBER OF THE CURRENT COMMAND IN THE SCRIPT AND THE VALUE OF $loop
#  18)  PRINTS OUT THE LIST OF FILES ON THE CAMERA WITH THE SELECTED EXTENSION ie /DCIM/100OLYMP/P421001.ORF /DCIM/100OLYMP/P421002.ORF etc
#  19)  PRINTS OUT THE ARRAY VALUE FOR TARGET FILE WITH PATH AT THE CURRENT LOOP POINT
#  20)  PRINTS OUT THE VALUE OF THE CURRENT LOOPS TARGET FILE WITH PATH ON THE CAMERA AND THE TARGET ON WORKING DIRECTORY
#  21)  PRINTS OUT THE VALUE OF THE CURRENT LOOPS TARGET FILE WITH PATH ON THE CAMERA AND THE TARGET ON BACKUP DIRECTORY
#  22)	PRINTS OUT THE NUMBER OF ELEMENTS IN target_array AND ALL THE VALUES OF target_array
#  23)	PRINTS OUT THE ELEMENTS OF image_types ARRAY
#  24)	PRINTS OUT THE FIRST [0] ELEMENT OF target_array
#  25)	PRINTS OUT THE SECOND [1] ELEMENT OF target_array
#  26)	PRINTS OUT THE VALUE OF IFS THE DELIMETER AND old_IFS THE PREVIOUS DELIMETER USING SHELL PARAMETER EXPANSION OPERATOR Q WHERE THE EXPANSION IS A STRING THAT IS THE VALUE OF PARAMETER QUOTED IN A FORMAT THAT CAN BE REUSED AS INPUT SHOWING \n RATHER THAN PRINTING A NEWLINE.
#  27)  PRINTS OUT A BLANK LINE USING $'\n' NEWLINE ANSI-C QUOTE CHARACTER
#  28)	CLOSE THE FUNCTION
#  30-36)	if CONDITIONAL TO CHANGE camera_dir, working_dir and backup_dir TO A TESTING SETUP IF THE ARGUMENT 'test' IS PASSED INTO THE POSITIONAL PARAMETER ${1} ie ./photo_downloader test
#  30)	if POSITIONAL PARAMETER ${1} IS EQUAL TO 'test' NOTE - OBSERVE SPACING OR THIS MATCHES ANY ARGUMENT PASSED
#  31)	then DO THESE COMMANDS
#  32)	PRINT OUT 'testing'
#  33)	SET camera_dir TO A LOCATION IN THE CURRENT DIRECTORY
#  34)	SET working_dir TO A LOCATION IN THE CURRENT DIRECTORY
#  35)	SET backup_dir TO A LOCATION IN THE CURRENT DIRECTORY
#  36)	CLOSE IF STATEMENT
#  THIS COULD ALSO BE WRITTEN AS
#  	[[ ${1} == "test"  ]] && { echo testing; camera_dir=./DCIM/100OLYMP/; working_dir=./working/; backup_dir=./backup/; }
#  38-49)	if; then; else; fi CONDITIONAL TO DETECT CAMERA AND EXIT SCRIPT IF NOT FOUND
#  38)	findmnt FINDS A MOUNTED FILESYSTEM WHERE -n, --noheadings IS DON'T PRINT COLUMN HEADINGS AND -o, --output IS THE OUTPUT COLUMNS TO BE SHOWN, IN THIS CASE target.
#		findmnt -n -o target /dev/sdc1
#			/media/$USER/OLY_E-30
#		[[ /media/$USER/OLY_E30 ]]
#			success OR error
#  39)	IF THE CONDITIONAL IS TRUE then
#  40)	PRINT A MESSAGE CAMERA IS ATTACHED
#  41)	IF THE CONDITIONAL IS FALSE else
#  42)	PRINT A MESSAGE CAMERA IS NOT ATTACHED. EXITING
#  43-48)	if; then; else; fi conditional TO CONTINUE DESPITE CAMERA NOT BEING ATTACHED WITH TESTING ENVIRONMENT OR EXIT THE SCRIPT
#  43)  if POSITIONAL PARAMETER ${1} IS EQUAL TO 'test' OBSERVE SPACING OR MATCHES ANY ARGUMENT PASSED
#  44)  if TRUE then
#  45)	PRINT OUT 'continuing with test directory structure.'
#  46)  else if NOT TRUE
#  47)  exit THE SCRIPT
#  48-49)	CLOSE if CONDITIONAL COMPOUND COMMANDS
#  51-62)	if; then; else; fi CONDITIONAL TO DETECT backup_data DRIVE AND MOUNT IF NESCESSARY. ORIGINALLY USED THE FOLLOWING
#		if [[ -n $(findmnt -n -o target $(readlink -f /dev/disk/by-label/"$backup_drive_label")) ]]
# WHERE readlink PRINTS THE VALUE OF A SYMBOLIC LINK OR CANONICAL (STANDARDISED) FILE NAME WHERE -f, --canonicalize IS CANONICALISE BY FOLLOWING EVERY SYMLINK IN EVERY COMPONENT OF THE GIVEN NAME RECURSIVELY; ALL BUT THE LAST COMPONENT MUST EXIST. findmnt FINDS A MOUNTED FILESYSTEM WHERE -n, --noheadings IS DON'T PRINT COLUMN HEADINGS AND -o, --output IS THE OUTPUT COLUMNS TO BE SHOWN, IN THIS CASE target.[[ expression ]] IS CONDITIONAL CONSTRUCT WHICH RETURNS A STATUS OF 0 OR 1 DEPENDING ON THE EVALAUATION OF expression. [[ -n string ]] IS A BASH CONDITIONAL EXPRESSION WHERE -n RETURNS true IF THE LENGTH OF THE STRING IS NON ZERO. EXIT OR RETURN STATUS IS 0 - SUCCESS OR NON ZERO - FAILURE. THIS SUPRESSES findmnt OUTPUT BY TESTING IF THE OUTPUT IS THERE OR NOT BUT THE -n, findmnt OPTIONS AND readlink ARE NOT NESCESSARY.
#  51)		findmnt /dev/disk/by-label/Backup_Data
#			[[ TARGET SOURCE FSTYPE OPTIONS /media/$USER/Backup_Data /dev/sdc ext4 rw,nosuid,nodev,relatime,errors=remount-ro ]] OR error
#			true OR error
#  52)	IF THE CONDITIONAL IS TRUE then
#  53)	PRINT A MESSAGE DISK IS MOUNTED
#  54)	IF THE CONDITIONAL IS FALSE else
#  55)  PRINT A MESSAGE DISK IS NOT MOUNTED
#  56-62)	if, then, else CONDITIONAL COMPOUND COMMANDS TO SET UP TESTING ENVIRONMENT OR MOUNT THE DRIVE
#  56)  if POSITIONAL PARAMETER ${1} IS EQUAL TO 'test'
#  57)  if TRUE then
#  58)	echo testing message
#  59)  else if NOT TRUE
#  60)	USE udiskctl RATHER THAN mount BECAUSE THIS IS HOW NAUTILUS FILE MANAGER DOES IT, THE MOUNT WILL HAVE THE SAME DEFAULTS AND IT DOOES NOT NEED TO BE ROOT (REQUIRING USER PASSWORD) AS mount DOES. -b, --block-device THE BLOCK DEVICE TO MOUNT.
#		udiskctl mount -b /dev/disk/by-label/Backup_Data
#  61-62)	CLOSE IF CONDITIONL COMPOUND COMMANDS
#  64)	PREPEND THE MOUNTPOINT TO THE camera_dir VARIABLE USING findmnt
#		findmnt -n -o target /dev/disk/by-id/usb-"OLYMPUS_E-30"_G68508673-0:0-part1
#			/media/$USER/OLY_E-30
#		camera_dir=/media/$USER/OLY_E-30"/DCIM/100OLYMP/"
#  65)	PREPEND THE MOUNTPOINT TO THE backup_dir VARIABLE USING findmnt
#		findmnt -n -o target /dev/disk/by-label/"Backup_Data"
#			/media/$USER/Backup_Data
#		backup_dir=/media/$USER/Backup_Data"/My Pictures/"
#  66)	loop COUNTS THE LOOPS FOR COPYING THE FILES. ORINGINALLY FOR TRACING IN THE FUNCTION variable_print_outs()
#  68)  PRINTS OUT THE VARIABLES
#		$backup_drive_label	=	Backup_Data
#		$camera_name		=	OLYMPUS_E-30
#		$camera_dir		=	/media/$USER/OLY_E-30/DCIM/100OLYMP/
#		$working_dir		=	/home/My Home/My Pictures/
#		$backup_dir		=	/media/$USER/Backup_Data/My Pictures/
#		$exiftool_date_pattern	=	%Y/raw images/%m %b/%Y_%m_%d/
#		$image_types[*]		=	ORF JPG jpg
#  SEPERATED BY $'\n' NEWLINES OR $'\t' TAB SPACES
#  70)	RESET VARIABLE target_array WITH unset - VARIABLE GETS ADDED TO ITSELF IN ORDER TO APPEND EACH FILE TO THE ARRAY
#  72-81)	 THE for LOOP EXECUTES COMMANDS ONCE FOR EACH MEMBER OF THE LIST WORDS WITH THE VARIABLE NAME TAKING THE VALUE OF THE WORD MATCHED FOR THAT RUN OF THE LOOP. 
#		for NAME in WORDS; do COMMANDS; done
#  CHECKS IF THE FILE EXTENSION EXISTS ON CAMERA AND THEN USES exiftool TO CREATE THE PATHS FOR THE FILES FROM METADATA AND APPEND THEM TO AN ARRAY. exiftool CAN BE CALLED ONCE WITH A LIST OF FILES TO READ AND OUTPUTS A LIST SEPERATED BY NEWLINES.
# 72)	for LOOP TO CYCLE THROUGH THE IMAGE TYPES SPECIFIED IN "${image_types[@]}" (ALL MEMBERS OF THE ARRAY)
#		for filename_extension in png ORF JPG jpg
#			$filename_extension=png
# 73)	do COMMANDS WITHIN LOOP
# 74)	PRINT OUT 'FILE TYPE IS: png'
# 75)	CREATE AN ARRAY OF THE FILES WITH THEIR PATHS.
#		files=(/media/$USER/OLY_E-30/DCIM/100OLYMP/*.png)
#  OR IN TESTING
#		files=(./DCIM/100OLYMP/*.png)
#  BASH WILL PASS * AS AN ARGUMENT IF IT CAN'T BE EXPANDED ie IF THERE ARE NO .png FILES IN THE CAMERA OR TESTING DIRECTORY AND './DCIM/100OLYMP/*.png' WILL BECOME ONLY ELEMENT OF THE ARRAY.
# 76)	ACCESS THE FIRST ELEMEMT OF THE ARRAY AND TEST IT TO SEE IF IT IS A FILE IN ORDER TO USE continue TO RESTART THE for LOOP AVOIDING UNNESCESSARY PROCESSING AND AVOID exiftool ERRORS.
#		[[ -a ./DCIM/100OLYMP/*.png ]]
#  THE RESERVED WORD [[ IS A CONDITIONAL WHICH RETURNS A STATUS OF 0 SUCCESS OR 1 FAIL DEPENDANT ON THE EVALUATION OF [[ expression ]] COMPOUND COMMAND. THE BASH CONDITIONAL EXPRESSION -a file RETURNS TRUE (0) IF FILE EXISTS OR FALSE (1) IF IT DOES NOT. THE WORDS BETWEEN THE [[ AND ]] DO NOT UNDERGO WORD SPLITTING AND FILENAME EXPANSION BUT DOES PERFORM TILDE EXPANSION, PARAMETER AND VARIABLE EXPANSION, ARITHMETIC EXPANSION, COMMAND SUBSTITUTION, PROCESS SUBSTITUTION, AND QUOTE REMOVAL ON THOSE WORDS (THE EXPANSIONS THAT WOULD OCCUR IF THE WORDS WERE ENCLOSED IN DOUBLE QUOTES). THE PIPELINE OPERATORS && AND || ARE 'AND' AND 'OR' WHILST ; IS FOR THE CONSECUTIVE EXECUTION OF COMMANDS. THE TERMINATOR && CREATES AN 'AND' LIST OF COMMANDS WHERE SUBSEQUENT COMMANDS ARE EXECUTED IF THE FIRST COMMAND EXITS WITH A STATUS OF ZERO (SUCCESS).
#		[[ -a /media/$USER/OLY_E-30/DCIM/100OLYMP/*.png ]]
#		&&  echo $'\n'file extension png exists on camera
#  IF TEST IS TRUE RETURNS 0 (SUCCESS) AND PRINT OUT A NEWLINE AND EXTENSION EXISTS AND PROCEED WITH THE REST OF THE LOOP
#		|| { echo $'\n'file extension png does not exist on camera$'\n'; continue; }
# IF TEST IS FALSE PRINT OUT A NEWLINE AND FILE NAME DOES NOT EXIST AND continue TO THE START OF THE LOOP TO TEST THE NEXT FILE EXTENSION. THE {} AROUND THE 'OR COMMANDS GROUP THEM INTO A THE LIST TO BE EXECUTED IN THE CURRENT SHELL CONTEXT. NO SUBSHELL IS CREATED. THE SEMICOLON (OR NEWLINE) FOLLOWING LIST IS REQUIRED.
#  77)	$IFS IS BOURNE SHELL VARIABLE CONTAINING A LIST OF CHARACTERS USED AS DELIMITERS TO SEPERATE FIELDS USED IN SHELL WORD SPLITTING AND EXPANSION, DEFAULT IS SPACE TAB NEWLINE. STORE THE CURRENT VALUE IN $old_IFS FOR EASY RESETTING THEN CHANGE $IFS TO COMMA AND NEWLINE.
#  78)  PRINT A MESSAGE TO TELL USER THAT EXIFTOOL IS WORKING
#  79)	USE exiftool WITH VARIABLE exiftool_date_pattern TO READ THE METADATA IN ALL THE IMAGE FILES OF THE CURRENT TYPE, AND PLACE THE -FileName AND -DateTimeOriginal TAGS SEPARATED BY COMAS INTO target_array TO CREATE A DIRECTORY NAMING PATTERN. IN THE ARRAY, FILENAMES ARE EVEN STARTING AT 0, PATHS ARE ODD STARTING AT 1 ALLOWING THE SCRIPT TO ACCESS INDIVIDUAL ELEMENTS.
#		exiftool -d "%Y/raw images/%m %b/%Y_%m_%d/" -FileName -DateTimeOriginal ./DCIM/100OLYMP/P421001.ORF
# RETURNS
#		======== ./DCIM/100OLYMP/P421001.ORF
#		File Name                       : P421001.ORF
#		Date/Time Original              : 2024/raw images/04 Apr/2024_04_21/
#  WHEREAS
# 		exiftool -p FMTFILE (-printFormat) Print output in specified format WHERE TAG NAMES ARE PREFIXED BY A '$'. PERL EXPRESSIONS CAN BE USED BY ENCLOSING IN {} SEPERATED BY COLONS ie "${TAG;EXPRESSION}" 
#		exiftool -p '$filename,$datetimeoriginal' -d "$exiftool_date_pattern" $camera_dir*."$filename_extension"
#  RETRIEVES THE TAGS FileName and DateTimeOriginal BUT WITHOUT ALL THE FORMATTING SEPARATED BY COMMAS AND NEWLINES
#		P421001.ORF,2024/raw images/04 Apr/2024_04_21/
#		P421002.ORF,2024/raw images/04 Apr/2024_04_21/
# THEREFORE TO APPEND THE OUTPUT OF exiftool TO THE ARRAY target_string USING THE '+=' OPERATOR:
#		target_string+=("P421001.ORF,2024/raw images/04 Apr/2024_04_21/ NEWLINE P421002.ORF,2024/raw images/04 Apr/2024_04_21/") ETC
#  80)	RESET THE $IFS DELIMETER SPECIAL PARAMETER TO DEFAULT VALUE STORED IN $old_IFS
#  81)	CLOSE FOR LOOP
#  83-104)	while; do; done LOOP CARRIES OUT COMMANDS WHILST A CONDITION IS UNMET
#  83)	OPEN while LOOP AND USE SHELL ARITHMATIC AS CONDITION TO CARRY OUT THE COMMANDS IF LOOP COUNTER IS LESS THAN OR EQUAL TO THE NUMBER OF ELEMENTS IN THE TARGET ARRAY
#  84)	IF TRUE DO COMMANDS
#  85)	if CONDITIONAL OF SHELL ARITHMETIC TO TEST FOR FIRST ITERATION OF LOOP
#  86)  then COMMANDS IF TRUE
#  87)	COMMENT TO KEEP UP WITH LOGIC!
#  88)	SET file_list ARRAY TO THE CAMERA DIRECTORY AND FILENAME IN target_array FOR THIS ITERATION. CHANGED TO AN ARRAY TO AVOID POSSIBILITY OF SPACES IN FILENAMES CAUSING rsync COMMAND TO FAIL
#		/DCIM/100OLYMP/P421001.ORF
#  89)	elif ELSE TEST IF PATH IN loop+1 (PATH IS SECOND ELEMENT OF ARRAY) IS THE SAME AS loop-1, THE PREVIOUS FILE PATH
#  90)	IF TRUE then DO COMMANDS
#  91)	COMMENT TO KEEP UP WITH LOGIC!
#  92)	APPEND SOURCE PATH TO file_list ARRAY
#		/DCIM/100OLYMP/P421001.ORF /DCIM/100OLYMP/P421002.ORF
#  93)	else DO COMMANDS
#  94)	COMMENT TO KEEP UP WITH LOGIC!
#  95)	SET working_path TO THE working_dir AND THE PREVIOUS FILE PATH BECAUSE WE ARE CLEARING THE LIST HAVING FOUND A PATH THAT DOESN'T MATCH THE PREVIOUS ONE
#		./working/2024/raw images/04 Apr/2024_04_21/
#  96)	SET backup_path TO THE backup_dir AND THE PREVIOUS FILE PATH BECAUSE WE ARE CLEARING THE LIST HAVING FOUND A PATH THAT DOESN'T MATCH THE PREVIOUS ONE
#		./backup/2024/raw images/04 Apr/2024_04_21/
#  97)	PRINT A MESSAGE transferring to WORKING AND BACKUP PATHS
#  98)	THE rsync COMMAND TO MAKE THE DIRECTORY PATH AND COPY FILES TO THE WORKING DIRECTORY PUT INTO THE BACKGROUND WITH & TERMINATOR, ALLOWING THE SECOND rsync TO CONTINUE ASYNCHRONOUSLY.
#		rsync --mkpath -a "/media/$USER/OLY_E-30/DCIM/100OLYMP/P421001.ORF /media/$USER/OLY_E-30/DCIM/100OLYMP/P421001.ORF" "/home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/"&
#		-- mkpath		CREATE DESTINATION'S MISSING PATH COMPONENTS
#		-a --archive		ARCHIVE MODE, IMPLIES
#						-r	RECURSIVE
#						-l	COPY LINKS
#						-p	PRESERVE PERMISSIONS
#						-t	PRESERVE MODIFICATION TIMES
#						-g	PRESERVE GROUP
#						-o	PRESERVE OWNER
#						-D	PRESERVE DEVICE / SPECIAL FILES
#  99)	rsync COMMAND FOR BACKUP DIRECTORY
#		rsync --mkpath -a "/media/$USER/OLY_E-30/DCIM/100OLYMP/P421001.ORF" "/medis/$USER/Backup_Data/My Pictures/2024/raw images/04 Apr/2024_04_21/P421001.ORF"
#  100)	wait COMMAND PAUSES THE SCRIPT UNTIL ALL BACKGROUND PROCESSES COMPLETE.
#  101)	SET file_list ARRAY TO THE CAMERA DIRECTORY AND FILENAME IN target_array FOR THIS ITERATION
#		/DCIM/100OLYMP/P421001.ORF
#  102)	CLOSE THE if BLOCK
#  103)	USE SHELL ARITHMETIC TO ADD 2 TO THE VALUE OF loop AT END OF LOOP. ADDING TWO BECAUSE THE ARRAY CONTAINS ALTERNATING FILENAMES AND PATHS AND WE WANT TO MOVE TO NEXT FILENAME.
#		loop = loop + 2
#  104) CLOSE THE while LOOP
#  106-110)	IF CONDITIONAL TO REMOVE TEST DIRECTORIES
#  106)	TEST FOR POSITIONAL PARAMETER 'test'
#  107)	IF TRUE THEN DO COMMANDS
#  108)	PRINT MEESAGE 'DELETING TEST DIRECTORIES'
#  109)	REMOVE DIRECTORIES AND FILES WHERE
#	rm	-r -R --recursive REMOVES FILES AND DIRECTORIES RECURSIVELY
#  110) CLOSE if BLOCK
#  112) CALL variable_print_outs DEBUGGING FUNCTION AND PASS THE ARGUMENT (THE BASH VARIABLE FOR CURRENT LINE NUMBER) "$LINENO". COMMENTED OUT FOR GENERAL USE.

