#! /bin/bash

# use bash -x ./photo_downloader to run in debug mode or uncomment the following:
# set -x

backup_drive_label='Backup_Data'
camera_name='OLYMPUS_E-30'
camera_dir='/DCIM/100OLYMP/'
working_dir='/home/My Home/My Pictures/'
backup_dir='/My Pictures/'
image_types=(png ORF JPG jpg)
exiftool_date_pattern='%Y/raw images/%m %b/%Y_%m_%d/'

function variable_print_outs ()
{
	echo from line $1
	echo loop$loop.line$LINENO "$loop"
	echo loop$loop.line$LINENO "$camera_dir"*."$filename_extension"
	echo loop$loop.line$LINENO "${target_array[loop]}"
	echo loop$loop.line$LINENO "$camera_dir"${target_array[loop]} "$working_dir"${target_array[((loop+1))]}${target_array[loop]}
	echo loop$loop.line$LINENO "$camera_dir"${target_array[loop]} "$backup_dir"${target_array[((loop+1))]}${target_array[loop]}
	echo loop$loop.line$LINENO ${#target_array[*]} ${target_array[*]}
	echo $'\n'
}

if [[ ${1} == "test"  ]]
	then
		echo testing
		camera_dir=./DCIM/100OLYMP/
		working_dir=./working/
		backup_dir=./backup/
fi

if [[ $(findmnt -n -o target /dev/disk/by-id/*"$camera_name"*part1) ]]
	then
		echo "$camera_name" camera is attached
	else
		echo "$camera_name" camera is not attached, exiting
		if [[ ${1} == "test" ]]
			then
				echo testing
				echo continuing with test directories
			else
				exit
		fi
fi

if [[ $(findmnt -n -o target /dev/disk/by-label/"$backup_drive_label") ]]
	then
		echo "$backup_drive_label" disk is mounted
	else
		echo "$backup_drive_label" is not mounted
		if [[ ${1} == "test" ]]
			then
				echo testing
				echo continuing with test directories
			else
				udisksctl mount -b /dev/disk/by-label/"$backup_drive_label"
		fi
fi

camera_dir=$(findmnt -n -o target /dev/disk/by-id/*"$camera_name"*part1)"$camera_dir"
backup_dir=$(findmnt -n -o target /dev/disk/by-label/"$backup_drive_label")"$backup_dir"
loop=0

echo Settings$'\n' backup_drive_label$'\t'"$backup_drive_label"$'\n' camera_name$'\t'$'\t'"$camera_name"$'\n' camera_dir$'\t'$'\t'"$camera_dir"$'\n' working_dir$'\t'$'\t'"$working_dir"$'\n' backup_dir$'\t'$'\t'"$backup_dir"$'\n' exiftool_date_pattern$'\t'"$exiftool_date_pattern"$'\n' image_types[*]$'\t'$'\t'"${image_types[*]}"$'\n'

unset target_array camera_file_list working_file_list backup_file_list
old_IFS=$IFS; IFS=,$'\n'
# variable_print_outs "$LINENO"
for filename_extension in ${image_types[*]}
do
	echo 'file type is:' $filename_extension
	files=($camera_dir*.$filename_extension)
	[[ -a  "${files[0]}" ]] &&  echo $'\n'file extension $filename_extension exists on camera$'\n' || { echo $'\n'file extension $filename_extension does not exist on camera$'\n'; continue; }
	
	target_array+=($(exiftool -p '$filename,$datetimeoriginal' -d "$exiftool_date_pattern" $camera_dir*."$filename_extension"))
done

while  ((loop<${#target_array[*]}))
do
	echo -en '\e[2K'

#	echo -e '\eM - approach a 1st rsync in {}&'
#	{ rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$working_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'; }&
#	rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$backup_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'
#	wait

	if [[ ${*} == *"--rsynca"* ]]
		then
			echo -e '\eM' ${*}' - 1st rsync in {}&'
			{ rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$working_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'; }&
				rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$backup_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'
			wait
		elif [[ ${*} == *"--rsyncb"* ]]
			then
				echo -e '\eM' ${*}' - 1st rsync in ()&'
				( rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$working_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'; )&
				rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$backup_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'
				wait
		elif [[ ${*} == *"--rsyncc"* ]]
			then
				echo -e '\eM' ${*}' - 1st rsync terminated with &'
				rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$working_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'&
				rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$backup_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'
				wait
		elif [[ ${*} == *"--rsyncd"* ]]
			then
				echo -e '\eM' ${*}' - both rsync grouped in {} terminated with & no wait command'
				{ rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$working_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'; }&
				{ rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$backup_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'; }&
		else
			echo -e '\eM' ${*}' - no  parallel'
			rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$working_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'
			rsync --mkpath --info=name2 -ah "$camera_dir"${target_array[loop]} "$backup_dir"${target_array[((loop+1))]}${target_array[loop]} | tr '\n' '\r'
	fi




	camera_file_list+=("$(find "$camera_dir" -name "${target_array[loop]}")"$'\n')
	working_file_list+=("$(find "$working_dir" -name "${target_array[loop]}")"$'\n')
	backup_file_list+=("$(find "$backup_dir" -name "${target_array[loop]}")"$'\n')
	((loop+=2))
done

IFS=$old_IFS

echo camera file list:$'\n' "${camera_file_list[*]##"$camera_dir"}" ${#camera_file_list[*]} files
echo working file list:$'\n' "${working_file_list[*]}" ${#working_file_list[*]} files
echo backup file list:$'\n' "${backup_file_list[*]}" ${#backup_file_list[*]} files


if [[ ${1} == "test" ]]
	then
		echo deleting test directories
			rm -rI ./backup ./working
	fi



#************************************************************************************************************
# COMMENTS
#***********************************************************************************************************
#   1)	'SHEBANG' # SHARP ! BANG OR SHA-BANG, HASHBANG etc SPECIFIES THE INTERPRETER AND ITS LOCATION FOR THE SCRIPT
#   3)	set BUILTIN MODIFIES SHELL BEHAVIOUR OR DISPLAYS NAMES AND VALUES OF SHELL VARIABLES. set -x OR set -o xtrace EQUIVALENT TO bash -x ./photo_downloader PRINTS A TRACE OF COMMANDS AND ARITHMATIC AND EXPANSIONS BEFORE EXECUTION FOR DEBUGGING
#   6-12)	PLACED VARIABLE ASSIGNMENTS TOGETHER HERE TO ALLOW EASY CUSTOMISATION EDITING OR POSSIBLE INTERACTIVE SCRIPT CHOICE SAY FOR CAMERA ID. mUST BE QUOTED TO ALLOW FOR SPACES IN NAMES (NO WORD SPLITTING) '' PRESERVES THE LITERAL VALUE "" PRESERVES THE LITERAL VALUE EXCEPT FOR $'|! CHARACTERS. THE SPECIAL PARAMETERS * AND @ CREATE LISTS OF POSITIONAL PARAMETERS IF QUOTED
#   6)	LABEL OF THE DRIVE TO MOUNT AND SEND THE BACKUP COPY TO, LABEL WAS THE EASIEST WAY TO CONSISTANTLY MOUNT DRIVE AND FIND THE MOUNT POINT ls /dev/disk/by-label/*
#   7)	THE NAME OF THE CAMERA FOUND BY PLUGING IN CAMERA AND AFTER AUTO MOUNT EXECUTING ls /dev/disk/by-id/*
#   8)	THE DIRECTORY STRUCTURE ON THE CAMERA'S MEMORY CARD, OLYMPUS USE /DCIM/100OLYMP
#   9)	THE DIRECTORY ON ~/home WHERE FILES TO BE PROCESSED WILL BE LOCATED
#  10)	THE DIRECTORY ON /media WHERE FILES TO BE ARCHIVED WILL BE LOCATED
#  11)	THE IMAGE FILE EXTENSIONS TO BE SEARCHED FOR AND DOWNLOADED FROM THE CAMERA
#  12)	PATTERN FOR exiftool -d DATE FORMAT OPTION USING strftime SYNTAX WHICH ULTIMATELY CREATES DATE BASED FOLDER STRUCTURE TO STORE IMAGES WHERE
#				%Y = YEAR AS DECIMAL INCLUDING CENTURY ie 2024
#				%m = MONTH AS DECIMAL ie 04
#				%b = MONTH AS SHORT STRING ie APR
#				%d = DAY OF THE MONTH AS DECIMAL ie 21
# RESULTING IN 2024/raw images/04 Apr/2024_04_21
#  14-24)	A FUNCTION TO PRINT OUT A LIST OF GLOBAL VARIABLES (BEFORE I FOUND set -x) TO HELP DEBUG / UNDERSTAND BASH AND TEST VARIABLE COMBINATIONS, EXPANSIONS AND SUBSTITUTIONS. COULD ALSO USE declare -p NAME WHERE -p	DISPLAY THE ATTRIBUTES AND VALUE OF EACH NAME
#		declare -p camera_dir
#			declare -- camera_dir="/media/$USER/OLY_E-30/media/$USER/OLY_E-30/DCIM/100OLYMP/"
#  14)	LONGHAND OPENING FOR FUNCTION
#  16)	PRINT OUT LINE NUMBER THE FUNCTION WAS CALLED FROM USING POSITIONAL PARAMETER $1 WHICH CONTAINS THE FIRST ARGUMENT PASSED TO THE FUNCTION IN THE CALL ie variable_print_outs <argument1>
#  17)  PRINTS OUT THE LOOP VARIABLE COUNTER AND BASH VARIABLE $LINENO WHICH RETURNS THE LINE NUMBER OF THE CURRENT COMMAND IN THE SCRIPT AND THE VALUE OF $loop
#  18)  PRINTS OUT THE LIST OF FILES ON THE CAMERA WITH THE SELECTED EXTENSION ie /DCIM/100OLYMP/P421001.ORF /DCIM/100OLYMP/P421002.ORF etc
#  19)  PRINTS OUT THE ARRAY VALUE FOR TARGET FILE WITH PATH AT THE CURRENT LOOP POINT
#  20)  PRINTS OUT THE VALUE OF THE CURRENT LOOPS TARGET FILE WITH PATH ON THE CAMERA AND THE TARGET ON WORKING DIRECTORY
#  21)  PRINTS OUT THE VALUE OF THE CURRENT LOOPS TARGET FILE WITH PATH ON THE CAMERA AND THE TARGET ON BACKUP DIRECTORY
#  22}	PRINTS OUT THE NUMBER OF ELEMENTS IN target_array AND ALL THE VALUES OF target_array
#  23)  PRINTS OUT A BLANK LINE USING $'\n' NEWLINE ANSI-C QUOTE CHARACTER
#  24)	CLOSE THE FUNCTION
#  26-32)	if CONDITIONAL TO CHANGE camera_dir, working_dir and backup_dir TO A TESTING SETUP IF THE ARGUMENT 'test' IS PASSED INTO THE POSITIONAL PARAMETER ${1} ie ./photo_downloader test
#  26)	if POSITIONAL PARAMETER ${1} IS EQUAL TO 'test' NOTE - OBSERVE SPACING OR THIS MATCHES ANY ARGUMENT PASSED
#  27)	then DO THESE COMMANDS
#  28)	PRINT OUT 'testing'
#  29)	SET camera_dir TO A LOCATION IN THE CURRENT DIRECTORY
#  30)	SET working_dir TO A LOCATION IN THE CURRENT DIRECTORY
#  31)	SET backup_dir TO A LOCATION IN THE CURRENT DIRECTORY
#  32)	CLOSE IF STATEMENT
#  THIS COULD ALSO BE WRITTEN AS
#  	[[ ${1} == "test"  ]] && { echo testing; camera_dir=./DCIM/100OLYMP/; working_dir=./working/; backup_dir=./backup/; }
#  34-46)	if; then; else; fi CONDITIONAL TO DETECT CAMERA AND EXIT SCRIPT IF NOT FOUND
#  34)	findmnt FINDS A MOUNTED FILESYSTEM WHERE -n, --noheadings IS DON'T PRINT COLUMN HEADINGS AND -o, --output IS THE OUTPUT COLUMNS TO BE SHOWN, IN THIS CASE target.
#		findmnt -n -o target /dev/sdc1
#			/media/$USER/OLY_E-30
#		[[ /media/$USER/OLY_E30 ]]
#			success OR error
#  35)	IF THE CONDITIONAL IS TRUE then
#  36)	PRINT A MESSAGE CAMERA IS ATTACHED
#  37)	IF THE CONDITIONAL IS FALSE else
#  38)	PRINT A MESSAGE CAMERA IS NOT ATTACHED. EXITING
#  39-45)	if; then; else; fi conditional TO CONTINUE DESPITE CAMERA NOT BEING ATTACHED WITH TESTING ENVIRONMENT OR EXIT THE SCRIPT
#  39)  if POSITIONAL PARAMETER ${1} IS EQUAL TO 'test' OBSERVE SPACING OR MATCHES ANY ARGUMENT PASSED
#  40)  if TRUE then
#  41)	PRINT OUT testing
#  42)	PRINT OUT 'continuing with test directories'
#  43)  else if NOT TRUE
#  44)  exit THE SCRIPT
#  45-46)	CLOSE if CONDITIONAL COMPOUND COMMANDS
#  48-60)	if; then; else; fi CONDITIONAL TO DETECT backup_data DRIVE AND MOUNT IF NESCESSARY. ORIGINALLY USED THE FOLLOWING
#		if [[ -n $(findmnt -n -o target $(readlink -f /dev/disk/by-label/"$backup_drive_label")) ]]
# WHERE readlink PRINTS THE VALUE OF A SYMBOLIC LINK OR CANONICAL (STANDARDISED) FILE NAME WHERE -f, --canonicalize IS CANONICALISE BY FOLLOWING EVERY SYMLINK IN EVERY COMPONENT OF THE GIVEN NAME RECURSIVELY; ALL BUT THE LAST COMPONENT MUST EXIST. findmnt FINDS A MOUNTED FILESYSTEM WHERE -n, --noheadings IS DON'T PRINT COLUMN HEADINGS AND -o, --output IS THE OUTPUT COLUMNS TO BE SHOWN, IN THIS CASE target.[[ expression ]] IS CONDITIONAL CONSTRUCT WHICH RETURNS A STATUS OF 0 OR 1 DEPENDING ON THE EVALAUATION OF expression. [[ -n string ]] IS A BASH CONDITIONAL EXPRESSION WHERE -n RETURNS true IF THE LENGTH OF THE STRING IS NON ZERO. EXIT OR RETURN STATUS IS 0 - SUCCESS OR NON ZERO - FAILURE. THIS SUPRESSES findmnt OUTPUT BY TESTING IF THE OUTPUT IS THERE OR NOT BUT THE -n, findmnt OPTIONS AND readlink ARE NOT NESCESSARY.
#  48)		findmnt /dev/disk/by-label/Backup_Data
#			[[ TARGET SOURCE FSTYPE OPTIONS /media/$USER/Backup_Data /dev/sdc ext4 rw,nosuid,nodev,relatime,errors=remount-ro ]] OR error
#			true OR error
#  49)	IF THE CONDITIONAL IS TRUE then
#  50)	PRINT A MESSAGE DISK IS MOUNTED
#  51)	IF THE CONDITIONAL IS FALSE else
#  52)  PRINT A MESSAGE DISK IS NOT MOUNTED
#  53-59)	if, then, else CONDITIONAL COMPOUND COMMANDS TO SET UP TESTING ENVIRONMENT OR MOUNT THE DRIVE
#  53)  if POSITIONAL PARAMETER ${1} IS EQUAL TO 'test'
#  54)  if TRUE then
#  55-56)	echo testing messages
#  57)  else if NOT TRUE
#  58)	USE udiskctl RATHER THAN mount BECAUSE THIS IS HOW NAUTILUS FILE MANAGER DOES IT, THE MOUNT WILL HAVE THE SAME DEFAULTS AND IT DOOES NOT NEED TO BE ROOT (REQUIRING USER PASSWORD) AS mount DOES. -b, --block-device THE BLOCK DEVICE TO MOUNT.
#		udiskctl mount -b /dev/disk/by-label/Backup_Data
#  59-60)	CLOSE IF CONDITIONL COMPOUND COMMANDS
#  62)	PREPEND THE MOUNTPOINT TO THE camera_dir VARIABLE USING findmnt
#		findmnt -n -o target /dev/disk/by-id/usb-"OLYMPUS_E-30"_G68508673-0:0-part1
#			/media/$USER/OLY_E-30
#		camera_dir=/media/$USER/OLY_E-30"/DCIM/100OLYMP/"
#  63)	PREPEND THE MOUNTPOINT TO THE backup_dir VARIABLE USING findmnt
#		findmnt -n -o target /dev/disk/by-label/"Backup_Data"
#			/media/$USER/Backup_Data
#		backup_dir=/media/$USER/Backup_Data"/My Pictures/"
#  64)	loop COUNTS THE LOOPS FOR COPYING THE FILES. ORINGINALLY FOR TRACING IN THE FUNCTION variable_print_outs()
#  66)	PRINTS OUT THE VARIABLES
#		$backup_drive_label	=	Backup_Data
#		$camera_name		=	OLYMPUS_E-30
#		$camera_dir		=	/media/$USER/OLY_E-30/DCIM/100OLYMP/
#		$working_dir		=	/home/My Home/My Pictures/
#		$backup_dir		=	/media/$USER/Backup_Data/My Pictures/
#		$exiftool_date_pattern	=	%Y/raw images/%m %b/%Y_%m_%d/
#		$image_types[*]		=	ORF JPG jpg
#  SEPERATED BY $'\n' NEWLINES OR $'\t' TAB SPACES
#  68)	RESET SOME VARIABLES - target_array camera_file_list working_file_list backup_file_list - WHICH GET ADDED TO THEMSELVES IN ORDER TO APPEND EACH FILE TO THE ARRAY
#  69)	$IFS IS BOURNE SHELL VARIABLE CONTAINING A LIST OF CHARACTERS USED AS DELIMITERS TO SEPERATE FIELDS USED IN SHELL WORD SPLITTING AND EXPANSION, DEFAULT IS SPACE TAB NEWLINE. STORE THE CURRENT VALUE IN $old_IFS FOR EASY RESETTING THEN CHANGE $IFS TO COMMA AND NEWLINE.
#  70)	CALLS FUNCTION variable_print_outs WITH ARGUMENT "$LINENO" (THE BASH VARIABLE FOR THECURRENT LINE NUMBER OF THE SCRIPT WHICH BECOMES POSITIONAL PARAMETER $1 IN THE FUNCTION, IN THIS CASE 70. COMMENTED OUT TILL NEEDED.
#  71-78)	 THE for LOOP EXECUTES COMMANDS ONCE FOR EACH MEMBER OF THE LIST WORDS WITH THE VARIABLE NAME TAKING THE VALUE OF THE WORD MATCHED FOR THAT RUN OF THE LOOP. 
#		for NAME in WORDS; do COMMANDS; done
#  CHECKS IF THE FILE EXTENSION EXISTS ON CAMERA AND THEN USES exiftool TO CREATE THE PATHS FOR THE FILES FROM METADATA AND APPEND THEM TO AN ARRAY. exiftool CAN BE CALLED ONCE WITH A LIST OF FILES TO READ AND OUTPUTS A LIST SEPERATED BY NEWLINES.
# 71)	for LOOP TO CYCLE THROUGH THE IMAGE TYPES SPECIFIED IN ${image_types[*]} (ALL MEMBERS OF THE ARRAY)
#		for filename_extension in png ORF JPG jpg
#			$filename_extension=png
# 72)	do COMMANDS WITHIN LOOP
# 73)	PRINT OUT 'FILE TYPE IS: png'
# 74)	CREATE AN ARRAY OF THE FILES WITH THEIR PATHS.
#		files=(/media/$USER/OLY_E-30/DCIM/100OLYMP/*.png)
#  OR IN TESTING
#		files=(./DCIM/100OLYMP/*.png)
#  BASH WILL PASS * AS AN ARGUMENT IF IT CAN'T BE EXPANDED ie IF THERE ARE NO .png FILES IN THE CAMERA OR TESTING DIRECTORY AND './DCIM/100OLYMP/*.png' WILL BECOME ONLY ELEMENT OF THE ARRAY.
# 75)	ACCESS THE FIRST ELEMEMT OF THE ARRAY AND TEST IT TO SEE IF IT IS A FILE IN ORDER TO USE continue TO RESTART THE for LOOP AVOIDING UNNESCESSARY PROCESSING AND AVOID exiftool ERRORS.
#		[[ -a ./DCIM/100OLYMP/*.png ]]
#  THE RESERVED WORD [[ IS A CONDITIONAL WHICH RETURNS A STATUS OF 0 SUCCESS OR 1 FAIL DEPENDANT ON THE EVALUATION OF [[ expression ]] COMPOUND COMMAND. THE BASH CONDITIONAL EXPRESSION -a file RETURNS TRUE (0) IF FILE EXISTS OR FALSE (1) IF IT DOES NOT. THE WORDS BETWEEN THE [[ AND ]] DO NOT UNDERGO WORD SPLITTING AND FILENAME EXPANSION BUT DOES PERFORM TILDE EXPANSION, PARAMETER AND VARIABLE EXPANSION, ARITHMETIC EXPANSION, COMMAND SUBSTITUTION, PROCESS SUBSTITUTION, AND QUOTE REMOVAL ON THOSE WORDS (THE EXPANSIONS THAT WOULD OCCUR IF THE WORDS WERE ENCLOSED IN DOUBLE QUOTES). THE PIPELINE OPERATORS && AND || ARE 'AND' AND 'OR' WHILST ; IS FOR THE CONSECUTIVE EXECUTION OF COMMANDS. THE TERMINATOR && CREATES AN 'AND' LIST OF COMMANDS WHERE SUBSEQUENT COMMANDS ARE EXECUTED IF THE FIRST COMMAND EXITS WITH A STATUS OF ZERO (SUCCESS).
#		[[ -a /media/$USER/OLY_E-30/DCIM/100OLYMP/*.png ]]
#		&&  echo $'\n'file extension png exists on camera
#  IF TEST IS TRUE RETURNS 0 (SUCCESS) AND PRINT OUT A NEWLINE AND EXTENSION EXISTS AND PROCEED WITH THE REST OF THE LOOP
#		|| { echo $'\n'file extension png does not exist on camera$'\n'; continue; }
# IF TEST IS FALSE PRINT OUT A NEWLINE AND FILE NAME DOES NOT EXIST AND continue TO THE START OF THE LOOP TO TEST THE NEXT FILE EXTENSION. THE {} AROUND THE 'OR COMMANDS GROUP THEM INTO A THE LIST TO BE EXECUTED IN THE CURRENT SHELL CONTEXT. NO SUBSHELL IS CREATED. THE SEMICOLON (OR NEWLINE) FOLLOWING LIST IS REQUIRED.
#  77)	USE exiftool WITH VARIABLE exiftool_date_pattern TO READ THE METADATA IN ALL THE IMAGE FILES OF THE CURRENT TYPE, AND PLACE THE -FileName AND -DateTimeOriginal TAGS SEPARATED BY COMAS INTO target_array TO CREATE A DIRECTORY NAMING PATTERN. IN THE ARRAY, FILENAMES ARE EVEN STARTING AT 0, PATHS ARE ODD STARTING AT 1 ALLOWING THE SCRIPT TO ACCESS INDIVIDUAL ELEMENTS.
#		exiftool -d "%Y/raw images/%m %b/%Y_%m_%d/" -FileName -DateTimeOriginal ./DCIM/100OLYMP/P421001.ORF
# RETURNS
#		======== ./DCIM/100OLYMP/P421001.ORF
#		File Name                       : P421001.ORF
#		Date/Time Original              : 2024/raw images/04 Apr/2024_04_21/
#  WHEREAS
# 		exiftool -p FMTFILE (-printFormat) Print output in specified format WHERE TAG NAMES ARE PREFIXED BY A '$'. PERL EXPRESSIONS CAN BE USED BY ENCLOSING IN {} SEPERATED BY COLONS ie "${TAG;EXPRESSION}" 
#	exiftool -p '$filename,$datetimeoriginal' -d "$exiftool_date_pattern" $camera_dir*."$filename_extension"
#  RETRIEVES THE TAGS FileName and DateTimeOriginal BUT WITHOUT ALL THE FORMATTING SEPARATED BY COMMAS AND NEWLINES
#		P421001.ORF,2024/raw images/04 Apr/2024_04_21/
#		P421002.ORF,2024/raw images/04 Apr/2024_04_21/
# THEREFORE TO APPEND THE OUTPUT OF exiftool TO THE ARRAY target_string USING THE '+=' OPERATOR:
#		target_string+=("P421001.ORF,2024/raw images/04 Apr/2024_04_21/ NEWLINE P421002.ORF,2024/raw images/04 Apr/2024_04_21/") ETC
#  78)	CLOSE FOR LOOP
# 
#  83)	PRINT THE SHELL SPECIAL PARAMETER WHICH EXPANDS TO THE POSITIONAL PARAMETERS AS SEPERATE WORDS STARTING FROM ONE WHEN NOT DOUBLE QUOTED. THEN SLEEP FOR 2 SECONDS AS THIS LINE GETS OVERWRITTEN.
#  85-121)	while LOOP TO READ CONTENTS OF ARRAY WHILE THE LOOP IS LESS THAN THE NUMBER OF ELEMENTS IN THE ARRAY AND rsync THE FILES. while CONDITION; do COMMANDS; done
#  85)	OPEN while LOOP. CONDITION TO TEST IS WHILE INNER LOOP COUNTER $loop IS LESS THAN THE NUMBER OF ELEMENTS IN $target_array
#  86)	do COMMANDS WITHIN LOOP
#  87)	USE ARITHMATIC EXPANSION AND SHELL ARITHMATIC TO COMBINE $loop1 AND $loop COUNTERS AND ASSIGN TO $loops. USED TO CREATE ARRAYS FROM find FILES COMMAND AND IN function variable_print_outs(). ie IF $loop1 = 1000 AND $loop = 2 THEN $loopS = 1002. BASH ONLY DOES INTEGER MATHS WHICH IS WHY loop1 STARTS AT 1000.
#  89)	PRINT A CLEAR LINE ESCAPE CHARACTER echo -en WHERE -e IS ALLOW INTERPRETAION OF BACKSLASH ESCAPE CHARACTERS AND -n IS SUPPRESS TRAILING NEWLINE. esc IS DECIMAL 27 OCTAL 033 HEX 0x1B C-ESCAPE \e AND CTRL-KEY ^[ . NOTE \e IS NOT GUARANTEED TO WORK IN ALL LANGUAGES AND COMPILERS. ESC[2K ERASE THE ENTIRE LINE (WILL NOT MOVE THE CURSOR - IT WILL REMAIN AT POSITION IT WAS AT BEFORE THE LINE WAS ERASED. USE \r CARRIAGE RETURN TO MOVE TOTHE START OF THE LINE). ALLOWS OVERWRITING OF LONGER rync OUTPUTS WHEN DIRECTORIES ARE CREATED AND FILES COPIED OR CHECKED. IE '\033[2k' AND '\e[2k' ARE EQUIVALENT ANSI ESCAPE SEQUENCES. THE CARRIAGE RETURN IS ACHEIVED WITH tr IN THE rsync COMMAND.
#  91-113)	if; then; elif; else; fi CONDITIONAL TO TEST OUT DIFFERENT rsync STRATEGIES BASED ON COMMAND LINE ARGUMENTS IN POSITIONAL PARAMETERS.
#  91)	IF SPECIAL PARAMETER REPRESENTING ALL POSITIONAL PARAMETERS CONTAINS THE STRING '--rsynca'
#  92)	IF TRUE THEN DO COMMANDS
#  93)	PRINT EXPLANATION OF rsync STRATEGY WHERE echo -e ENABLES BACKSLASH ESCAPE CHARACTERS AND '\eM' MOVES THE CURSOR UP ONE LINE OVERWRITING THE  PREVIOUS ECHO.
#  94)	THE rsync COMMAND TO MAKE THE DIRECTORY PATH AND COPY FILES TO THE WORKING DIRECTORY. THE OUTPUT IS PIPED THROUGH tr. THIS IS COMMAND TO TRANSLATE OR DELETE CHARACTERS AND IS USED TO REPLACE THE TRAILING newline ESCAPE CHARACTER FROM RSYNC OUTPUT WITH A CARRIAGE RETURN TO MAKE OUTPUT OVERWRITE ITSELF. THE COMMANDS ARE GROUPED WITHIN {} AND THEN PUT INTO THE BACKGROUND WITH & TERMINATOR, ALLOWING THE SECOND rsync TO CONTINUE ASYNCHRONOUSLY.
#		{ rsync --mkpath --info name2 -ah "/media/$USER/OLY_E-30/DCIM/100OLYMP/P421001.ORF" "/home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/P421001.ORF"| tr '\n' '\r' }&
#		-- mkpath		CREATE DESTINATION'S MISSING PATH COMPONENTS
#		-- info name2		INFORMATION VERBOSITY
#		-h --human readable	OUTPUT NUMBERS IN HUMAN READABLE FORMAT
#		-a --archive		ARCHIVE MODE, IMPLIES
#						-r	RECURSIVE
#						-l	COPY LINKS
#						-p	PRESERVE PERMISSIONS
#						-t	PRESERVE MODIFICATION TIMES
#						-g	PRESERVE GROUP
#						-o	PRESERVE OWNER
#						-D	PRESERVE DEVICE / SPECIAL FILES
#  95)	rsync COMMAND FOR BACKUP DIRECTORY
#		rsync --mkpath --info name2 -ah "/media/$USER/OLY_E-30/DCIM/100OLYMP/P421001.ORF" "/medis/$USER/Backup_Data/My Pictures/2024/raw images/04 Apr/2024_04_21/P421001.ORF" | tr '\n' '\r'
#  96)	wait COMMAND PAUSES THE SCRIPT UNTIL ALL BACKGROUND PROCESSES COMPLETE.
#  97)	ELSE IF CONDITIONAL TO TEST FOR ARGUMENT '--rsyncb' IN POSITIONAL PARAMETERS
#  98)	IF TRUE THEN DO COMMANDS
#  99)	PRINT STRATEGY EXPLANATION
#  100)	rsync | tr COMMANDS FOR WORKING GROUPED WITH () AND THEREFORE RUN IN SUBSHELL THEN MOVED TO BACKGROUND WITH & TERMINATOR
#  101)	rsync | tr COMMANDS FOR BACKUP
#  102)	wait COMMAND PAUSES FOR ALL BACKGROUND TASKS
#  103)	ELSE IF CONDITIONAL TO TEST FOR ARGUMENT '--rsyncc' IN POSITIONAL PARAMETERS
#  104)	IF TRUE THEN DO COMMANDS
#  105)	PRINT STRATEGY EXPLANATION
#  106)	rsync | tr COMMANDS FOR WORKING THEN MOVED TO BACKGROUND WITH & TERMINATOR
#  107)	rsync | tr COMMANDS FOR BACKUP
#  108)	wait COMMAND PAUSES FOR ALL BACKGROUND TASKS
#  109)	ELSE IF CONDITIONAL TO TEST FOR ARGUMENT '--rsyncd' IN POSITIONAL PARAMETERS
#  110)	IF TRUE THEN DO COMMANDS
#  111)	PRINT STRATEGY EXPLANATION
#  112)	rsync | tr COMMANDS FOR WORKING GROUPED WITH {} THEN MOVED TO BACKGROUND WITH & TERMINATOR
#  113)	rsync | tr COMMANDS FOR BACKUP GROUPED WITH {} THEN MOVED TO BACKGROUND WITH & TERMINATOR

#  114)	ELSE IF FALSE THEN DO COMMANDS
#  115)	PRINT STRATEGY EXPLANATION
#  116)	rsync | tr COMMANDS FOR WORKING
#  117)	rsync | tr COMMANDS FOR BACKUP
#  118)	CLOSE IF BLOCK
#  120)	CREATE A LIST OF THE FILES TO BE COPIED WITH A NEWLINE $'\n' IN AN ARRAY BY USING FIND COMMAND TO CONFIRM COPY.
#  		find PATH -name PATTERN RETURNS FILENAME WITH PATH
#			-name TEST FOR BASE OF FILENAME (PATH REMOVED) TO MATCH PATTERN IN PATH
#		find "/media/$USER/OLY_E-30/DCIM/100OLYMP" -name "P421001.ORF"
#			/media/$USER/OLY_E-30/DCIM/100OLYMP/P421001.ORF
#		camera_file_list[1001]="/media/$USER/OLY_E-30/DCIM/100OLYMP/P421001.ORF"$'\n'
#  121)	CREATE A LIST OF THE FILES LOCATED ON WORKING SYSTEM WITH A NEWLINE $'\n' IN AN ARRAY BY USING FIND COMMAND
#		find "/home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21" -name "P421001.ORF"
#			/home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/P421001.ORF
#		working_file_list[1001]="/home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/P421001.ORF""$'\n'
#  122)	CREATE A LIST OF THE FILES LOCATED ON BACKUP SYSTEM WITH A NEWLINE $'\n' IN AN ARRAY BY USING FIND COMMAND
#		find "/media/$USER/Backup_Data/My Pictures/2024/raw images/04 Apr/2024_04_21" -name "P421001.ORF"
#			/media/$USER/Backup_Data/My Pictures/2024/raw images/04 Apr/2024_04_21/P421001.ORF
#		backup_file_list[1001]="/home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/P421001.ORF""$'\n'
#  124)	USE SHELL ARITHMETIC TO ADD 2 TO THE VALUE OF loop AT END OF LOOP. ADDING TWO BECAUSE THE ARRAY CONTAINS ALTERNATING FILENAMES AND PATHS AND WE WANT TO MOVE TO NEXT FILENAME.
#		loop = loop + 2
#  126)	CLOSE loop
#  128)	PRINT A BLANK LINE
#  129)	RESET THE $IFS DELIMETER SPECIAL PARAMETER TO DEFAULT VALUE STORED IN $old_IFS
#  130)	USE SHELL ARITHMETIC TO ADD 1000 TO THE VALUE OF loop1 AND RESET loop TO 0
#  131)	CLOSE LOOP1
#  133)	PRINT OUT A SUMMARY LIST OF FILES ON THE CAMERA USING SHELL PARAMETER EXPANSION TO REMOVE THE PATH FROM THE VARIABLE $camera_file_list[*]} ${ parameter##word } WHERE word IS PATTERN MATCHED TO parameter, IN THIS CASE THE VARIABLE $camera_dir.IF THE MATCH IS MADE TO THE BEGINNING OF parameter THE RESULT IS THE DELETION OF THE LONGEST MATCHING PATTERN. ${#name[*]} IS THE NUMBER OF ELEMENTS IN THE ARRAY camera_file_list
#		"${/media/$USER/OLY_E-30/DCIM/100OLYMP/P421001.ORF\n /media/$USER/OLY_E-30/DCIM/100OLYMP/P421002.ORF\n /media/$USER/OLY_E-30/DCIM/100OLYMP/P421003.ORF\n ## "/media/$USER/OLY_E-30/DCIM/100OLYMP/"}" ${# /media/$USER/OLY_E-30/DCIM/100OLYMP/P421001.ORF\n /media/$USER/OLY_E-30/DCIM/100OLYMP/P421002.ORF\n /media/$USER/OLY_E-30/DCIM/100OLYMP/P421003.ORF\n}
#			camera file list
#			 P421001.ORF
#			 P421002.ORF
#			 P421003.ORF
#			 3 files
#  134)	PRINT OUT A SUMMARY LIST OF FILES IN THE WORKING DIRECTORY WHERE ${#name[*]} IS THE NUMBER OF ELEMENTS IN THE ARRAY working_file_list
#		"${/home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/P421001.ORF/n /home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/P421002.ORF/n /home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/P421003.ORF/n ## "/home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/"}" ${# /home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/P421001.ORF/n /home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/P421002.ORF/n /home/$USER/My Pictures/2024/raw images/04 Apr/2024_04_21/P421003.ORF/n}
#			working file list
#			 ./working/2024/raw images/04 Apr/2024_04_21/P421001.ORF
#			 ./working/2024/raw images/04 Apr/2024_04_21/P421002.ORF
#			 ./working/2024/raw images/04 Apr/2024_04_21/P421003.ORF
#			 3 files
#  135)	PRINT OUT A SUMMARY LIST OF FILES IN THE BACKUP DIRECTORY WHERE ${#name[*]} IS THE NUMBER OF ELEMENTS IN THE ARRAY working_file_list
#		"${/media/$USER/Backup_Data/My Pictures/2024/raw images/04 Apr/2024_04_21/P421001.ORF/n /media/$USER/Backup_Data/My Pictures/2024/raw images/04 Apr/2024_04_21/P421002.ORF/n /media/$USER/Backup_Data/My Pictures/2024/raw images/04 Apr/2024_04_21/P421003.ORF/n ## "/media/$USER/Backup_Data/My Pictures/2024/raw images/04 Apr/2024_04_21"}" ${# /media/$USER/Backup_Data/My Pictures/2024/raw images/04 Apr/2024_04_21/P421001.ORF/n /media/$USER/Backup_Data/My Pictures/2024/raw images/04 Apr/2024_04_21/P421002.ORF/n /media/$USER/Backup_Data/My Pictures/2024/raw images/04 Apr/2024_04_21/P421003.ORF/n}
#			backup file list
#			 ./backup/2024/raw images/04 Apr/2024_04_21/P421001.ORF
#			 ./backup/2024/raw images/04 Apr/2024_04_21/P421002.ORF
#			 ./backup/2024/raw images/04 Apr/2024_04_21/P421003.ORF
#			 3 files
#  137-141)	IF CONDITIONAL TO REMOVE TEST DIRECTORIES
#  137)	TEST FOR POSITIONAL PARAMETER 'test'
#  138)	IF TRUE THEN DO COMMANDS
#  139)	PRINT MEESAGE 'DELETING TEST DIRECTORIES'
#  140)	REMOVE DIRECTORIES AND FILES WHERE 
#	rm	-r -R --recursive REMOVES FILES AND DIRECTORIES RECURSIVELY
#		-I INTERACTIVE MODE PROMPTS ONCE BEFORE REMOVING MORE THAN THREE FILES OR WHEN IN RECURSIVE MODE
